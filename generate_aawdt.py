import argparse
import pandas as pd
from datetime import date

FILTER_BY_YEAR = 2018

def create_parser():
    parser = argparse.ArgumentParser(
        prog="AAWDT Generator",
        description="Pass in an excel file and specify the date, region, and count columns"
    )
    
    parser.add_argument('all_estimation_points_path')
    parser.add_argument('set2_point_path')
    parser.add_argument('aawdt_base_file_path')
    
    return parser

def apply_growth_factor(region,date):
    growth_factor = {
        'NW': {
            2023: 0.9594935848,
            2022: 1.028604629,
            2021: 1.131531433,
            2020: 1.298661982,
            2019: 1.26396621,
            2018: 0.9472716239
        },
        'SW': {
            2023: 1.014765005,
            2022: 1.040698961,
            2021: 1.154267914,
            2020: 1.275317592,
            2019: 0.9658253106,
            2018: 0.9631218146
        },
        'SE': {
            2023: 1.166951278,
            2022: 1.127555206,
            2021: 1.209760223,
            2020: 1.215735133,
            2019: 0.9983962249,
            2018: 1.02772134
        },
        'NE': {
            2023: 1.032176389,
            2022: 1.471975009,
            2021: 1.138848242,
            2020: 1.149610711,
            2019: 0.9626143063,
            2018: 1.080313389
        },
        'Downtown': {
            2023: 1.043346564,
            2022: 1.167208451,
            2021: 1.158601953,
            2020: 1.210455231,
            2019: 1.047700513,
            2018: 1.044076766
        }
    }
    if not pd.isna(date):
        growth_year = int("20" + date.split('/')[-1])
        if growth_year >= FILTER_BY_YEAR:
            try:
                return growth_factor[region][growth_year]
            except:
                print(f"Did not apply the growth factor for {date}.")
                return 1
        else:
            return 0
    else:
        return 0

def apply_adjustment_factor(region,year):
    adjustment_factor = {
        "SE":{
            1: {
                0: 1.195166572,
                1: 1.093552504,
                2: 1.074762778,
                3: 1.078791398,
                4: 1.049022789
            },
            2: {
                0: 1.286664901,
                1: 1.069513962,
                2: 1.012298698,
                3: 0.9988082392,
                4: 0.9596047631
            },
            3: {
                0: 1.07617936,
                1: 1.018449309,
                2: 0.9964354958,
                3: 0.9891769297,
                4: 1.000792292
            },
            4: {
                0: 1.023838645,
                1: 0.9800414504,
                2: 0.9559786355,
                3: 0.9332056214,
                4: 0.9070355803
            },
            5: {
                0: 1.049028995,
                1: 0.9499871259,
                2: 0.9178477061,
                3: 0.908656588,
                4: 0.8815450768
            },
            6: {
                0: 0.9937108282,
                1: 0.9580288617,
                2: 0.940595281,
                3: 0.9132854573,
                4: 0.8956656835
            },
            7: {
                0: 1.040817217,
                1: 0.9486739839,
                2: 0.9361425663,
                3: 0.9344496726,
                4: 0.9038274367
            },
            8: {
                0: 1.079908152,
                1: 0.9676418732,
                2: 0.9634521281,
                3: 0.9334502359,
                4: 0.9249016219
            },
            9: {
                0: 1.081384494,
                1: 0.9562105878,
                2: 0.9440702511,
                3: 0.9404456429,
                4: 0.9033256249
            },
            10: {
                0: 1.113086355,
                1: 0.9766003755,
                2: 0.9614120048,
                3: 0.9484629194,
                4: 0.9139255469
            },
            11: {
                0: 1.157293113,
                1: 1.038493861,
                2: 1.008201185,
                3: 1.044764775,
                4: 0.9788513917
            },
            12: {
                0: 1.133162751,
                1: 1.140033406,
                2: 1.249761079,
                3: 1.158623822,
                4: 1.045417602
            }
        },
    "Downtown":{
            1: {
                0: 1.196998342,
                1: 1.096501667,
                2: 1.086344386,
                3: 1.095873126,
                4: 1.052836043
            },
            2: {
                0: 1.248508338,
                1: 1.069826253,
                2: 1.036001797,
                3: 1.029533237,
                4: 0.9584277183
            },
            3: {
                0: 1.091001073,
                1: 1.045425601,
                2: 1.030325774,
                3: 1.02020168,
                4: 1.00538589
            },
            4: {
                0: 1.037079629,
                1: 0.9929293782,
                2: 0.9802532703,
                3: 0.9504620828,
                4: 0.9132998028
            },
            5: {
                0: 1.056801213,
                1: 0.9625756568,
                2: 0.9375684376,
                3: 0.9190774875,
                4: 0.8818142911
            },
            6: {
                0: 0.9864303697,
                1: 0.96097604,
                2: 0.9349780403,
                3: 0.9157292627,
                4: 0.8976220392
            },
            7: {
                0: 1.064949728,
                1: 0.9742228489,
                2: 0.9667839957,
                3: 0.9545666281,
                4: 0.9328442786
            },
            8: {
                0: 1.076036856,
                1: 0.9779672822,
                2: 0.969913013,
                3: 0.9438400108,
                4: 0.9319471626
            },
            9: {
                0: 1.065466644,
                1: 0.9517758391,
                2: 0.952902187,
                3: 0.9573907654,
                4: 0.8990945002
            },
            10: {
                0: 1.105031496,
                1: 0.9785526941,
                2: 0.9661086742,
                3: 0.9540753935,
                4: 0.9146073287
            },
            11: {
                0: 1.119005468,
                1: 1.025087815,
                2: 1.000821317,
                3: 1.001166124,
                4: 0.9528874355
            },
            12: {
                0: 1.050052501,
                1: 1.076709192,
                2: 1.197452663,
                3: 1.059329661,
                4: 0.9660276952
            }
        },
    'SW': {
            1: {  # January
                0: 1.179007184,
                1: 1.048095957,
                2: 1.056071297,
                3: 1.072398049,
                4: 1.062128776
            },
            2: {
                0: 1.207781405,
                1: 1.017652233,
                2: 1.007153228,
                3: 1.014564494,
                4: 0.9544900666
            },
            3: {
                0: 1.093850954,
                1: 1.026553986,
                2: 1.026312655,
                3: 1.016941072,
                4: 1.038577169
            },
            4: {
                0: 1.051561685,
                1: 0.9682227498,
                2: 0.9679411,
                3: 0.9401912983,
                4: 0.9306748187
            },
            5: {
                0: 1.0740338,
                1: 0.9503924369,
                2: 0.9266087422,
                3: 0.9123623752,
                4: 0.8962276288
            },
            6: {
                0: 0.9941536182,
                1: 0.9500532444,
                2: 0.9282447964,
                3: 0.9110965487,
                4: 0.9263224751
            },
            7: {
                0: 1.129507702,
                1: 1.003371811,
                2: 0.9928856389,
                3: 0.9838919539,
                4: 0.9867562941
            },
            8: {
                0: 1.130574777,
                1: 0.9915974658,
                2: 0.9837943975,
                3: 0.9707373635,
                4: 0.975568733
            },
            9: {
                0: 1.076037246,
                1: 0.9249878523,
                2: 0.9303257611,
                3: 0.9905175491,
                4: 0.9064278675
            },
            10: {
                0: 1.116887879,
                1: 0.9532845487,
                2: 0.9423213517,
                3: 0.934735107,
                4: 0.9235632768
            },
            11: {
                0: 1.131301352,
                1: 1.007450723,
                2: 0.9829261117,
                3: 0.953356161,
                4: 0.9603236475
            },
            12: {
                0: 1.044740997,
                1: 1.065357289,
                2: 1.136674026,
                3: 1.046817252,
                4: 0.9671005606
            }
        },
    'NW': {
            1: {
                0: 1.223693631,
                1: 1.130471135,
                2: 1.089617344,
                3: 1.107291119,
                4: 1.019894854,
            },
            2: {
                0: 1.265934035,
                1: 1.11350907,
                2: 1.067725412,
                3: 1.049655367,
                4: 0.9467898583,
            },
            3: {
                0: 1.083643269,
                1: 1.073577096,
                2: 1.03090064,
                3: 1.02834233,
                4: 0.9526893415,
            },
            4: {
                0: 1.036585057,
                1: 1.025057121,
                2: 1.006293998,
                3: 0.9576175803,
                4: 0.8803039794,
            },
            5: {
                0: 1.072876258,
                1: 0.9934886255,
                2: 0.9606477996,
                3: 0.9401418988,
                4: 0.86479344,
            },
            6: {
                0: 0.9938042773,
                1: 0.9932545617,
                2: 0.9436846323,
                3: 0.9288593315,
                4: 0.8674594371,
            },
            7: {
                0: 1.013231911,
                1: 0.9480988577,
                2: 0.9334949721,
                3: 0.9171828051,
                4: 0.8791387116,
            },
            8: {
                0: 0.9972897318,
                1: 0.943730555,
                2: 0.919348105,
                3: 0.9024477449,
                4: 0.8705575287,
            },
            9: {
                0: 1.070060776,
                1: 1.003191526,
                2: 1.008072475,
                3: 0.978668369,
                4: 0.9090656104,
            },
            10: {
                0: 1.12094937,
                1: 1.032787039,
                2: 1.008233895,
                3: 1.006342039,
                4: 0.9141133087,
            },
            11: {
                0: 1.114161592,
                1: 1.054752244,
                2: 1.020173842,
                3: 1.024940102,
                4: 0.9329847988,
            },
            12: {
                0: 1.000965019,
                1: 1.082832485,
                2: 1.278570173,
                3: 0.998912995,
                4: 0.9179208161,
            },
        },
    'NE': {
            1: {
                0: 1.190125979,
                1: 1.113887071,
                2: 1.124926124,
                3: 1.125011937,
                4: 1.080297752
            },
            2: {
                0: 1.233653009,
                1: 1.078629746,
                2: 1.056829848,
                3: 1.05510485,
                4: 0.9728261852
            },
            3: {
                0: 1.110330708,
                1: 1.063122013,
                2: 1.067654306,
                3: 1.046346389,
                4: 1.029484757
            },
            4: {
                0: 1.036333127,
                1: 0.9983961919,
                2: 0.9907993481,
                3: 0.9708338311,
                4: 0.9351848329
            },
            5: {
                0: 1.031265798,
                1: 0.956434439,
                2: 0.9451695024,
                3: 0.9151490881,
                4: 0.8846910187
            },
            6: {
                0: 0.9640527552,
                1: 0.9425674924,
                2: 0.9273874514,
                3: 0.9096757133,
                4: 0.9010405612
            },
            7: {
                0: 1.076242081,
                1: 0.9967467434,
                2: 1.004612805,
                3: 0.9827420808,
                4: 0.9616546719
            },
            8: {
                0: 1.096374763,
                1: 1.008899235,
                2: 1.013057421,
                3: 0.9687246988,
                4: 0.9567607668
            },
            9: {
                0: 1.034384059,
                1: 0.9227133903,
                2: 0.9291402604,
                3: 0.9199315005,
                4: 0.8775588981
            },
            10: {
                0: 1.069202379,
                1: 0.9515388126,
                2: 0.9524674452,
                3: 0.9267615091,
                4: 0.9068271826
            },
            11: {
                0: 1.073265815,
                1: 0.9996544323,
                2: 0.9919841309,
                3: 0.9816034561,
                4: 0.9393899038
            },
            12: {
                0: 1.021341235,
                1: 1.01861359,
                2: 1.124805373,
                3: 1.032964577,
                4: 0.9336718017
            }
    }
    }
    
    if not pd.isna(year):
        adj_year = int("20" + year.split('/')[-1])
        if adj_year >= FILTER_BY_YEAR:
            adj_month = int(year.split('/')[0])
            adj_day = int(year.split('/')[1])
            day_of_week = date(
                year=adj_year,
                month=adj_month,
                day=adj_day
            ).weekday()
            
            try:
                return adjustment_factor[region][adj_month][day_of_week]
            except:
                print("Found a date on Saturday or Sunday: ",year)
                return -1
        else:
            return 0
    else:
        return 0

def update_file(df:pd.DataFrame):
    df['growth_factor'] = df.apply(lambda x: apply_growth_factor(x['Region'],x['Date']),axis=1)
    df['adj_factor'] = df.apply(lambda x: apply_adjustment_factor(x['Region'],x['Date']),axis=1)
    df['AAWDT'] = df['Count'] * df['adj_factor'] * df['growth_factor']
    
    return df
    
def preprocess_data(arguments:dict)->pd.DataFrame:    
    all_points_file_name = arguments['all_estimation_points_path']
    set2_file_name = arguments['set2_point_path']
    aawdt_file_name = arguments['aawdt_base_file_path']
    
    df1 = pd.read_excel(rf'{all_points_file_name}')
    df2 = pd.read_csv(rf'{set2_file_name}')
    aawdt_df = pd.read_excel(rf'{aawdt_file_name}',sheet_name=1)

    df1 = df1[['Site_Numbe','Region']].rename({"Site_Numbe":"Estimation_point"},axis=1).copy()
    df2 = df2[['Estimation_point','Region']].copy()

    regions = {
        "SouthEast":"SE",
        "NorthWest" : "NW",
        "SouthWest" : "SW",
        "NorthEast" : "NE"
    }

    df1['Region'] = df1['Region'].map(regions).fillna(df1['Region'])
    df2['Region'] = df2['Region'].map(regions).fillna(df2['Region'])

    all_points = pd.concat([df1,df2]).reset_index(drop=True)

    all_points = all_points.drop_duplicates(subset=['Estimation_point'])


    aawdt_df = aawdt_df.merge(right=all_points,right_on="Estimation_point",left_on="Site_Number",how="left")

    aawdt_df['Date'] = aawdt_df['Date'].dt.strftime('%m/%d/%y')
    aawdt_df['Count'] = aawdt_df['Count'].fillna(0)

    return aawdt_df
    

if __name__ == "__main__":
    parser = create_parser()
    arguments = vars(parser.parse_args())
    df = preprocess_data(arguments)
    df = update_file(df=df)
    
    df.to_excel("Updated file with AAWDT.xlsx",index=False)